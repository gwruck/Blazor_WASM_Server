
@using System.Reflection
@using Blazor_WASM_Server.Client.Shared
@using Blazor_WASM_Server.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Routing
@inject NavigationManager navMan

<CascadingAuthenticationState>
    <CascadingValue TValue="BlazorModes?" Value="blazorMode" Name="BlazorMode">

        <Router AppAssembly="@typeof(AppHost).Assembly" AdditionalAssemblies="new[] {typeof(Blazor_WASM_Server.Client.Pages.IndexWASM).Assembly}">
            <Found Context="routeData">
                <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>
                <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
            </Found>
            <NotFound>
                <PageTitle>Not found</PageTitle>
                <LayoutView Layout="@typeof(MainLayout)"> @****NOTE: use same MainLayout as Client pages*@
                    <p role="alert">Sorry, there's nothing at this address.</p>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingValue>
</CascadingAuthenticationState>

@code
{
    private BlazorModes? blazorMode = BlazorModes.WASM;

    protected override async Task OnInitializedAsync()
    {
        await SetBlazorMode();  //***Determine if we are running in Server or WASM mode
        await base.OnInitializedAsync();
    }

    private async Task SetBlazorMode()
    {
        var baseUri = navMan.BaseUri;
        if (baseUri.Length < navMan.Uri.Length)
        {
            var uriPath = navMan.Uri.Replace(baseUri, "");
            if (uriPath.StartsWith("svr"))
            {
                blazorMode = BlazorModes.Server;
            }
            else
            {
                blazorMode = BlazorModes.WASM;
            }
        }
    }
    
}
